package FFT

// ------- Imports START -- DO NOT MODIFY BELOW
import Chisel.{Complex => _, Mux => _, Reg => _, RegNext => _, RegInit => _, Pipe => _, Mem => _,
               Module => _, ModuleOverride => _, when => _, switch => _, is => _, unless => _, Round => _,  _}
import ChiselDSP._
// ------- Imports END -- OK TO MODIFY BELOW

/** FFT Module that supports both fixed and floating point testing */
class FFT[T <: DSPQnm[T]](gen : => T) extends GenDSPModule (gen) {

  val peNum = 0
  val pe = DSPModule(new PE(gen,num = peNum), nameExt = peNum.toString)
  override val io = new PEIO(gen)
  pe.io <> io

  val memDepth = Params.getFFT.sizes.max
  val mem = DSPModule(new Memory(Complex(gen),depth = memDepth), nameExt = "A_0")
  val memIO = new MemIO(Complex(gen), depth = memDepth)
  mem.io <> memIO

}
